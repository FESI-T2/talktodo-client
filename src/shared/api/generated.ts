/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/v1/user/profile': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 사용자 정보
     * @description 현재 로그인한 사용자의 정보를 반환한다.
     */
    get: operations['getUser'];
    /**
     * 사용자 정보 수정
     * @description 현재 로그인한 사용자 정보를 수정합니다.
     */
    put: operations['updateProfile'];
    post?: never;
    /**
     * 회원탈퇴
     * @description 서비스를 탈퇴한다.
     */
    delete: operations['withdraw'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/v1/task/{taskId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 단건 할 일 조회
     * @description 사용자에 지정된 할 일을 상세조회합니다.
     */
    get: operations['getTask'];
    /**
     * 단건 할 일 수정
     * @description 사용자에 지정된 할 일을 수정합니다.
     */
    put: operations['updateTask'];
    post?: never;
    /**
     * 단건 할 일 삭제
     * @description 사용자에 지정된 할 일을 삭제합니다.
     */
    delete: operations['deleteTask'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/v1/task/{taskId}/memo': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 단일 메모 조회
     * @description 메모 ID를 기반으로 메모를 조회합니다. 로그인한 사용자의 메모만 조회 가능합니다.
     */
    get: operations['getMemo'];
    /**
     * 메모 내용 생성
     * @description @Lob로 저장된 메모 내용을 수정합니다.
     */
    put: operations['upsertMemo'];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/v1/goal/{goalId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 목표 상세
     * @description 로그인한 사용자의 목표를 상세조회합니다.
     */
    get: operations['getDetail'];
    /**
     * 목표 수정
     * @description 로그인한 사용자의 목표를 수정합니다.
     */
    put: operations['edit'];
    post?: never;
    /**
     * 목표 삭제
     * @description 로그인한 사용자의 목표를 삭제합니다.
     */
    delete: operations['remove'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/v1/user/logout': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 로그아웃
     * @description Security 로그아웃 필터를 실행한다.
     */
    post: operations['logout'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/v1/task': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 단건 할 일 생성
     * @description 사용자에 지정된 할 일을 생성합니다.
     */
    post: operations['createTask'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/v1/goal': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 목표 목록
     * @description 로그인한 사용자의 목표를 조회합니다.
     */
    get: operations['get'];
    put?: never;
    /**
     * 목표 생성
     * @description 로그인한 사용자의 목표를 생성합니다.
     */
    post: operations['add'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/v1/file/upload': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 파일 업로드
     * @description 프로필 이미지를 업로드하고 업로드 정보를 반환합니다.
     */
    post: operations['upload'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/v1/auth/reissue': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * AccessToken 재발급 요청
     * @description 만료된 AccessToken 재발급을 요청한다.
     */
    post: operations['issueAccessToken'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/v1/task/done/{taskId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * 완료 상태 토글
     * @description 현재 isDone 값을 반전시킵니다, 상태값을 받지 않고 API요청되면 DB의 값을 토글하여 반환
     */
    patch: operations['toggleDone'];
    trace?: never;
  };
  '/v1/task/date/{date}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 날짜별 할 일 조회
     * @description yyyy-MM-dd 형식의 날짜를 받아 해당 날짜의 할 일을 조회합니다, ISO 8601 준수
     */
    get: operations['getTasksByDate'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/v1/file/view/{fileId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 파일 보기
     * @description 이미지 파일을 바이너리로 바로 응답
     */
    get: operations['viewFile'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/v1/file/download/{fileId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 파일 다운로드
     * @description 프로필 이미지를 서버에서 다운로드 합니다.
     */
    get: operations['downloadFile'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    UserRequest: {
      nickname: string;
      profileImageUrl: string;
      pushNotificationEnabled: boolean;
    };
    ApiResponseUsers: {
      isSuccess?: boolean;
      code?: string;
      message?: string;
      result?: components['schemas']['Users'];
    };
    Users: {
      userId?: string[];
      socialId?: string;
      socialName?: string;
      nickname?: string;
      email?: string;
      isActive?: boolean;
      profileImageUrl?: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      modifiedAt: string;
    };
    TaskRequest: {
      content?: string;
      /** @enum {string} */
      priority?: '중요' | '보통' | '낮음';
      /** Format: date */
      taskDate?: string;
      repeatEnabled?: boolean;
      repeatTypes?: ('월' | '화' | '수' | '목' | '금' | '토' | '일')[];
      goalId?: string;
      /**
       * Format: time
       * @example 06:30:00
       */
      startTime?: string;
      /**
       * Format: time
       * @example 07:00:00
       */
      endTime?: string;
    };
    ApiResponseTaskResponse: {
      isSuccess?: boolean;
      code?: string;
      message?: string;
      result?: components['schemas']['TaskResponse'];
    };
    LocalTime: {
      /** Format: int32 */
      hour?: number;
      /** Format: int32 */
      minute?: number;
      /** Format: int32 */
      second?: number;
      /** Format: int32 */
      nano?: number;
    };
    TaskResponse: {
      taskId?: string;
      /** Format: int64 */
      taskNo?: number;
      content?: string;
      /** @enum {string} */
      priority?: '중요' | '보통' | '낮음';
      /** Format: date */
      taskDate?: string;
      startTime?: components['schemas']['LocalTime'];
      endTime?: components['schemas']['LocalTime'];
      isDone?: boolean;
      repeatEnabled?: boolean;
      repeatTypes?: string[];
      goalId?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      modifiedAt?: string;
    };
    MemoRequest: {
      memo: string;
    };
    ApiResponseMemoResponse: {
      isSuccess?: boolean;
      code?: string;
      message?: string;
      result?: components['schemas']['MemoResponse'];
    };
    MemoResponse: {
      content?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      modifiedAt?: string;
    };
    GoalRequest: {
      /**
       * @description 목표명
       * @example 하루 30분 운동하기
       */
      goalName?: string;
    };
    ApiResponseGoalResponse: {
      isSuccess?: boolean;
      code?: string;
      message?: string;
      result?: components['schemas']['GoalResponse'];
    };
    GoalResponse: {
      goalId?: string;
      goalName?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      modifiedAt?: string;
    };
    ApiResponseFileResponse: {
      isSuccess?: boolean;
      code?: string;
      message?: string;
      result?: components['schemas']['FileResponse'];
    };
    FileResponse: {
      fileId?: string;
      originalFilename?: string;
    };
    ApiResponseString: {
      isSuccess?: boolean;
      code?: string;
      message?: string;
      result?: string;
    };
    ApiResponseUserResponse: {
      isSuccess?: boolean;
      code?: string;
      message?: string;
      result?: components['schemas']['UserResponse'];
    };
    UserResponse: {
      socialName?: string;
      nickname?: string;
      email?: string;
      profileImageUrl?: string;
    };
    ApiResponseTaskSummaryResponse: {
      isSuccess?: boolean;
      code?: string;
      message?: string;
      result?: components['schemas']['TaskSummaryResponse'];
    };
    TaskSummaryResponse: {
      doneTasks?: components['schemas']['TaskResponse'][];
      undoneTasks?: components['schemas']['TaskResponse'][];
      /** Format: int64 */
      totalCount?: number;
      /** Format: int64 */
      doneCount?: number;
      /** Format: int64 */
      undoneCount?: number;
    };
    ApiResponseListGoalResponse: {
      isSuccess?: boolean;
      code?: string;
      message?: string;
      result?: components['schemas']['GoalResponse'][];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  getUser: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseUserResponse'];
        };
      };
    };
  };
  updateProfile: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UserRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseUsers'];
        };
      };
    };
  };
  withdraw: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseString'];
        };
      };
    };
  };
  getTask: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        taskId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseTaskResponse'];
        };
      };
    };
  };
  updateTask: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        taskId: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['TaskRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseTaskResponse'];
        };
      };
    };
  };
  deleteTask: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        taskId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseString'];
        };
      };
    };
  };
  getMemo: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        taskId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseMemoResponse'];
        };
      };
    };
  };
  upsertMemo: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        taskId: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['MemoRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseMemoResponse'];
        };
      };
    };
  };
  getDetail: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        goalId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseGoalResponse'];
        };
      };
    };
  };
  edit: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        goalId: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['GoalRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseGoalResponse'];
        };
      };
    };
  };
  remove: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        goalId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseString'];
        };
      };
    };
  };
  logout: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  createTask: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['TaskRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseTaskResponse'];
        };
      };
    };
  };
  get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseListGoalResponse'];
        };
      };
    };
  };
  add: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['GoalRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseGoalResponse'];
        };
      };
    };
  };
  upload: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        'multipart/form-data': {
          /** Format: binary */
          file: string;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ApiResponseFileResponse'];
        };
      };
    };
  };
  issueAccessToken: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseString'];
        };
      };
    };
  };
  toggleDone: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        taskId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseTaskResponse'];
        };
      };
    };
  };
  getTasksByDate: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        date: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseTaskSummaryResponse'];
        };
      };
    };
  };
  viewFile: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        fileId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
  downloadFile: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        fileId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
    };
  };
}
